<?php

namespace App\Tests;

use App\ICS\ICSHelper;
use ICal\ICal;
use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;

class ICalTest extends WebTestCase
{
    protected function setUp(): void
    {
        self::bootKernel();
    }

    public function testRange(): void
    {
        $ics = <<<'EOF'
BEGIN:VCALENDAR
METHOD:PUBLISH
PRODID:Microsoft Exchange Server 2010
VERSION:2.0
X-WR-CALNAME:Kalender
BEGIN:VTIMEZONE
TZID:Romance Standard Time
BEGIN:STANDARD
DTSTART:16010101T030000
TZOFFSETFROM:+0200
TZOFFSETTO:+0100
RRULE:FREQ=YEARLY;INTERVAL=1;BYDAY=-1SU;BYMONTH=10
END:STANDARD
BEGIN:DAYLIGHT
DTSTART:16010101T020000
TZOFFSETFROM:+0100
TZOFFSETTO:+0200
RRULE:FREQ=YEARLY;INTERVAL=1;BYDAY=-1SU;BYMONTH=3
END:DAYLIGHT
END:VTIMEZONE
BEGIN:VEVENT
UID:040000008200E00074C5B7101A82E00800000000FC46588EDAE6D901000000000000000
 010000000F2E2DCCFE24AA64B9E58892D37BD09C7
SUMMARY:Working elsewhere
DTSTART;VALUE=DATE:20230920
DTEND;VALUE=DATE:20230921
CLASS:PUBLIC
PRIORITY:5
DTSTAMP:20230914T073920Z
TRANSP:OPAQUE
STATUS:CONFIRMED
SEQUENCE:0
X-MICROSOFT-CDO-APPT-SEQUENCE:0
X-MICROSOFT-CDO-BUSYSTATUS:WORKINGELSEWHERE
X-MICROSOFT-CDO-INTENDEDSTATUS:BUSY
X-MICROSOFT-CDO-ALLDAYEVENT:TRUE
X-MICROSOFT-CDO-IMPORTANCE:1
X-MICROSOFT-CDO-INSTTYPE:0
X-MICROSOFT-DONOTFORWARDMEETING:FALSE
X-MICROSOFT-DISALLOW-COUNTER:FALSE
X-MICROSOFT-REQUESTEDATTENDANCEMODE:DEFAULT
END:VEVENT
END:VCALENDAR
EOF;

        $ical = new ICal($ics);
        $events = $ical->eventsFromRange(
            '2023-09-19',
            '2023-09-25'
        );

        $this->assertCount(1, $events);
    }

    public function testHmm(): void
    {
        $testIcal = <<<ICS
BEGIN:VCALENDAR
METHOD:PUBLISH
PRODID:Microsoft Exchange Server 2010
VERSION:2.0
X-WR-CALNAME:TilstedevÃ¦relse
BEGIN:VTIMEZONE
TZID:Romance Standard Time
BEGIN:STANDARD
DTSTART:16010101T030000
TZOFFSETFROM:+0200
TZOFFSETTO:+0100
RRULE:FREQ=YEARLY;INTERVAL=1;BYDAY=-1SU;BYMONTH=10
END:STANDARD
BEGIN:DAYLIGHT
DTSTART:16010101T020000
TZOFFSETFROM:+0100
TZOFFSETTO:+0200
RRULE:FREQ=YEARLY;INTERVAL=1;BYDAY=-1SU;BYMONTH=3
END:DAYLIGHT
END:VTIMEZONE
BEGIN:VEVENT
RRULE:FREQ=WEEKLY;UNTIL=20230919T220000Z;INTERVAL=1;BYDAY=TU,WE;WKST=SU
UID:040000008200E00074C5B7101A82E00800000000C5BA1206E4DBD901000000000000000
 010000000708E11944AB7594FB7007D11E359307F
SUMMARY:Away
DTSTART;VALUE=DATE:20230905
DTEND;VALUE=DATE:20230906
CLASS:PUBLIC
PRIORITY:5
DTSTAMP:20230831T083519Z
TRANSP:OPAQUE
STATUS:CONFIRMED
SEQUENCE:0
X-MICROSOFT-CDO-APPT-SEQUENCE:0
X-MICROSOFT-CDO-BUSYSTATUS:OOF
X-MICROSOFT-CDO-INTENDEDSTATUS:BUSY
X-MICROSOFT-CDO-ALLDAYEVENT:TRUE
X-MICROSOFT-CDO-IMPORTANCE:1
X-MICROSOFT-CDO-INSTTYPE:1
X-MICROSOFT-DONOTFORWARDMEETING:FALSE
X-MICROSOFT-DISALLOW-COUNTER:FALSE
X-MICROSOFT-REQUESTEDATTENDANCEMODE:DEFAULT
END:VEVENT
END:VCALENDAR
ICS;

        $actuals = [];
        foreach ([
                     'UTC',
                     'Europe/Copenhagen',
                 ] as $timezone) {
            $ical = new ICal($testIcal);
            $ical = new ICal($testIcal, [
                'defaultTimeZone' => $ical->calendarTimeZone(),
            ]);
            $actuals[$timezone] = $ical->events();
        }

        $this->assertCount(6, $actuals['UTC']);
        $this->assertEquals(
            count($actuals['UTC']),
            count($actuals['Europe/Copenhagen']),
        );

        // $events = $this->icsHelper->getEvents($testIcal,
        //     new \DateTimeImmutable('2001-01-01'),
        //     new \DateTimeImmutable('2101-01-01'),
        // );

        // $this->assertCount(6, $events);
    }
}
